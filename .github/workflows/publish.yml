name: Publish to PyPI

on:
  push:
    tags:
      - "v*.*.*"  # v0.2.6 etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Locate frontend and existing builds
        run: |
          set -e
          FRONT=""
          if [ -f saterys/web/package.json ]; then
            FRONT="saterys/web"
          elif [ -f web/package.json ]; then
            FRONT="web"
          fi
          echo "FRONTEND_DIR=${FRONT}" >> $GITHUB_ENV
          echo "FRONTEND_DIR=${FRONT}"

          # show what we have
          [ -n "${FRONT}" ] && ls -la "${FRONT}" || true
          [ -f dist/index.html ] && echo "Found root dist/index.html" || echo "No root dist/"
          [ -f saterys/static/index.html ] && echo "Found saterys/static/index.html (prebuilt)" || true

      # Set up Node (cached) only if we found a frontend + a lockfile
      - name: Set up Node (cached)
        if: env.FRONTEND_DIR != '' && hashFiles(format('{0}/package-lock.json', env.FRONTEND_DIR), format('{0}/pnpm-lock.yaml', env.FRONTEND_DIR), format('{0}/yarn.lock', env.FRONTEND_DIR)) != ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            ${{ env.FRONTEND_DIR }}/package-lock.json
            ${{ env.FRONTEND_DIR }}/pnpm-lock.yaml
            ${{ env.FRONTEND_DIR }}/yarn.lock

      # If frontend exists but no lockfile, install without cache
      - name: Set up Node (no cache)
        if: env.FRONTEND_DIR != '' && hashFiles(format('{0}/package-lock.json', env.FRONTEND_DIR), format('{0}/pnpm-lock.yaml', env.FRONTEND_DIR), format('{0}/yarn.lock', env.FRONTEND_DIR)) == ''
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # Build only if a frontend exists
      - name: Build Svelte frontend
        if: env.FRONTEND_DIR != ''
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm run build
          test -f dist/index.html || { echo "❌ ${PWD}/dist/index.html not found after build"; exit 1; }

      - name: Copy frontend into Python package
        run: |
          set -e
          mkdir -p saterys/static

          # 1) Prefer freshly built saterys/web/dist
          if [ -n "${FRONTEND_DIR}" ] && [ -f "${FRONTEND_DIR}/dist/index.html" ]; then
            echo "Copying ${FRONTEND_DIR}/dist -> saterys/static"
            rsync -a "${FRONTEND_DIR}/dist/" "saterys/static/"
          # 2) Else fall back to root-level dist/ if present
          elif [ -f "dist/index.html" ]; then
            echo "Copying root dist/ -> saterys/static"
            rsync -a "dist/" "saterys/static/"
          fi

          # Require that static assets exist now
          test -f saterys/static/index.html || {
            echo "❌ saterys/static/index.html missing."
            echo "Either keep frontend at saterys/web (so CI builds), or commit/copy a root dist/ before tagging."
            exit 1
          }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"  # safer for numpy/rasterio wheels

      - name: Build wheel/sdist
        run: |
          python -m pip install --upgrade pip build twine
          rm -rf dist build *.egg-info
          python -m build
          ls -lh dist

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --non-interactive dist/*
