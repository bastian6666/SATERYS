name: Publish to PyPI

on:
  push:
    tags:
      - "v*.*.*"   # e.g., v0.2.3

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4

      - name: Debug tree (quick sanity)
        run: |
          pwd && ls -la
          test -f web/package.json && echo "‚úÖ web/package.json found" || echo "‚ùå web/package.json missing"
          test -f web/package-lock.json && echo "‚úÖ web/package-lock.json found" || echo "‚ö†Ô∏è no package-lock (ok)"
          test -d web && echo "üìÅ web exists"
          test -d saterys && echo "üìÅ saterys exists"

      # Use cache only if a lockfile exists (prevents the ‚Äúpaths not resolved‚Äù error)
      - name: Set up Node (cached if lockfile)
        if: ${{ hashFiles('web/package-lock.json', 'web/pnpm-lock.yaml', 'web/yarn.lock') != '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            web/package-lock.json
            web/pnpm-lock.yaml
            web/yarn.lock

      - name: Set up Node (no cache)
        if: ${{ hashFiles('web/package-lock.json', 'web/pnpm-lock.yaml', 'web/yarn.lock') == '' }}
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Build Svelte frontend (web/)
        working-directory: web
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npm run build
          test -f dist/index.html || { echo "‚ùå web/dist/index.html not found after build"; exit 1; }

      - name: Copy frontend into Python package
        run: |
          mkdir -p saterys/static
          rsync -a web/dist/ saterys/static/
          test -f saterys/static/index.html || { echo "‚ùå saterys/static/index.html missing after copy"; exit 1; }

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Build wheel/sdist
        run: |
          python -m pip install --upgrade pip build twine
          rm -rf dist build *.egg-info
          python -m build
          ls -lh dist

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload --non-interactive dist/*
